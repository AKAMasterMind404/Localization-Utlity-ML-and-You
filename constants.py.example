K_DEBUG_MODE = False # Internal debugging
CURRENT_PART = 2 # 1 = Part 1 localization, 2 = Part 2 localization
ALPHA = 0.3 # 0 = MOST RESISTANT TO FIRE, 1 = LEAST RESISTANT TO FIRE
TIME_RATE = 0 # SECONDS OF WAIT BETWEEN EACH T
MAX_SENSE = 8 # Bot2 - Number of times detection used before moving
MAX_MOVES_CAP = 6000 # Max threshold of steps allowed before termination

# CELL STATES
CELL_CLOSED = 1
CELL_OPENED = 0

GRID_SIZE = 30  # Default value, will update dynamically
MARGIN = 2  # Space between cells
HEADER_HEIGHT = 50  # Space for text and buttons
WINDOW_WIDTH, WINDOW_HEIGHT = 800, 800  # Default window size

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
YELLOW = (255, 255, 0)
RED = (255, 0, 0)
ORANGE = (255, 165, 0)
D1_ORANGE = (255, 140, 0)
D2_ORANGE = (255, 120, 0)
D3_ORANGE = (255, 100, 0)
GREEN = (0, 255, 0)
GRAY = (99, 102, 106)
BLUE = (0, 100, 255)
BROWN = (101, 67, 33)
PURPLE = (128, 0, 128)
LIGHT_BLUE = (173, 216, 230)


def update_grid_constants(n, screen_width, screen_height):
    global CELL_SIZE, SCREEN_SIZE

    # Ensure cells fit properly within screen dimensions
    max_cell_size_w = (screen_width - (n * MARGIN)) // n
    max_cell_size_h = (screen_height - HEADER_HEIGHT - (n * MARGIN)) // n

    CELL_SIZE = max(5, min(40, min(max_cell_size_w, max_cell_size_h)))  # Keep it reasonable
    SCREEN_SIZE = (n * (CELL_SIZE + MARGIN), n * (CELL_SIZE + MARGIN) + HEADER_HEIGHT)

    return CELL_SIZE, SCREEN_SIZE


# Initialize with default values
CELL_SIZE, SCREEN_SIZE = update_grid_constants(GRID_SIZE, WINDOW_WIDTH, WINDOW_HEIGHT)
